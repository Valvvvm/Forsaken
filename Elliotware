local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
local Version = "1.4.0"
local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI/" .. Version))()

local Window = WindUI:CreateWindow({
    Title = "⚡ ElliotWare 🍕",
    Icon = "rbxassetid://131801444479185",
    Author = "🍕Elliot & Chance🎰",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(580, 460),
    KeySystem = {
        Key = "ForsakenWare",
        Note = "The Key is in the post",
        URL = "https://github.com/Footagesus/WindUI",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 170,
    HasOutline = true,
})

local Notification = WindUI:Notify({
    Title = "⚡ ElliotWare Beta! ⚡",
    Content = "Thank you for using ElliotWare!",
    Duration = 5,
})

WindUI:AddTheme({
    Name = "Elliot",
    Accent = "#8B0000",
    Outline = "#2E2E2E",
    Background = "#1A1A1A",
    SecondaryBackground = "#3D0000",
    TertiaryBackground = "#5A0000",
    Text = "#FFFFFF",
    PlaceholderText = "#BBBBBB",
    DisabledText = "#777777",
    Button = "#8B0000",
    ButtonText = "#FFFFFF",
    Scrollbar = "#5A0000",
    TabBackground = "#2E2E2E",
    TabText = "#EAEAEA"
})
WindUI:SetTheme("Elliot")

local Tab = Window:Tab({
    Title = "⚙️ Generators",
    Icon = "rbxassetid://132848470438461",
})

local Section = Tab:Section({ 
    Title = "🔧 Generator Auto-Repair",
    TextXAlignment = "Left",
    TextSize = 17,
})

Tab:Toggle({
    Title = "🛠️ Auto-Repair (Slow)",
    Desc = "Repairs the generator slowly to avoid suspicion.",
    Value = false,
    Callback = function(state)
    end,
})

Tab:Toggle({
    Title = "⚡ Auto-Repair (Very Fast)",
    Desc = "Instantly repairs the generator (Use at your own risk).",
    Value = false,
    Callback = function(state)
        task.spawn(function()
            local gameArea = workspace:FindFirstChild("Map")
            if not gameArea then return end
            local gameSession = gameArea:FindFirstChild("Ingame")
            if not gameSession then return end
            local levelData = gameSession:FindFirstChild("Map")
            if not levelData then return end

            for _, obj in ipairs(levelData:GetChildren()) do
                if obj:IsA("Model") and obj.Name == "Generator" then
                    local interaction = obj:FindFirstChild("Remotes")
                    if interaction then
                        local remote = interaction:FindFirstChild("RE")
                        if remote and remote:IsA("RemoteEvent") then
                            remote:FireServer()
                        end
                    end
                end
            end
        end)
    end,
})

Tab:Button({
    Title = "🔩 Repair Generator",
    Desc = "Starts the generator repair process (Level 1).",
    Callback = function()
        task.spawn(function()
            local gameArea = workspace:FindFirstChild("Map")
            if not gameArea then return end
            local gameSession = gameArea:FindFirstChild("Ingame")
            if not gameSession then return end
            local levelData = gameSession:FindFirstChild("Map")
            if not levelData then return end

            for _, obj in ipairs(levelData:GetChildren()) do
                if obj:IsA("Model") and obj.Name == "Generator" then
                    local interaction = obj:FindFirstChild("Remotes")
                    if interaction then
                        local remote = interaction:FindFirstChild("RE")
                        if remote and remote:IsA("RemoteEvent") then
                            remote:FireServer()
                        end
                    end
                end
            end
        end)
    end,
})

Tab:Toggle({
    Title = "🚀 Auto-Farm Generators",
    Desc = "Teleports and repairs all generators automatically.",
    Value = false,
    Callback = function(state)
        if state then
            local Players = game:GetService("Players")
            local player = Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local ingameFolder = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Ingame")
            local mapFolder = ingameFolder and ingameFolder:FindFirstChild("Map")

            if mapFolder and character and character.PrimaryPart then
                local generators = {}

                for _, g in ipairs(mapFolder:GetChildren()) do
                    if g:IsA("Model") and g.Name == "Generator" then
                        local progress = g:FindFirstChild("Progress")
                        local remotes = g:FindFirstChild("Remotes")
                        local remoteEvent = remotes and remotes:FindFirstChild("RE")
                        local remoteRF = remotes and remotes:FindFirstChild("RF")

                        if progress and progress:IsA("NumberValue") and remoteEvent and remoteRF then
                            table.insert(generators, { model = g, progress = progress, remote = remoteEvent, remoteRF = remoteRF })
                        end
                    end
                end

                if #generators > 0 then
                    while state do
                        for _, gen in ipairs(generators) do
                            if gen.progress.Value < 100 then
                                local genPrimaryPart = gen.model.PrimaryPart or gen.model:FindFirstChildWhichIsA("BasePart")
                                if genPrimaryPart then
                                    local direction = genPrimaryPart.CFrame.LookVector
                                    local positionInFront = genPrimaryPart.Position + direction * 5
                                    character:SetPrimaryPartCFrame(CFrame.new(positionInFront))
                                    print("Teleported to generator:", gen.model.Name)

                                    local args = {
                                        [1] = "enter"
                                    }
                                    while gen.progress.Value < 100 and state do
                                        gen.remoteRF:InvokeServer(unpack(args))
                                        gen.remote:FireServer()
                                        wait(0.5)
                                    end

                                    print("Generator completed:", gen.model.Name)
                                    wait(0.5)
                                end
                            end
                        end

                        local allCompleted = true
                        for _, gen in ipairs(generators) do
                            if gen.progress.Value < 100 then
                                allCompleted = false
                                break
                            end
                        end

                        if allCompleted then
                            print("All generators completed.")
                            break
                        end
                    end
                else
                    print("No generators found.")
                end
            else
                print("Map or character not found.")
            end
        end
    end,
})

Tab:Toggle({
    Title = "🎲 Teleport to Random Generator",
    Desc = "Randomly teleports to a generator.",
    Value = false,
    Callback = function(state)
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")

        local ingameFolder = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Ingame")
        local mapFolder = ingameFolder and ingameFolder:FindFirstChild("Map")

        if mapFolder and hrp then
            local generators = {}

            for _, g in ipairs(mapFolder:GetChildren()) do
                if g.Name == "Generator" then
                    table.insert(generators, g)
                end
            end

            if #generators >= 4 and #generators <= 7 then
                local randomGen = generators[math.random(1, #generators)]
                hrp.CFrame = randomGen.CFrame + Vector3.new(0, 3, 0)
                print("Teleported to a random generator.")
            else
                print("Generator count is not between 4 and 7.")
            end
        else
            print("Map or HumanoidRootPart not found.")
        end
    end,
})
local Tab = Window:Tab({
    Title = "Survivors",
    Icon = "rbxassetid://128085975431361", -- lucide or rbxassetid
})
local Tab = Window:Tab({
    Title = "🏃 Survivors",
    Icon = "rbxassetid://128085975431361",
})

local function protectGame()
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)

    mt.__namecall = newcclosure(function(self, ...)
        local args = {...}
        local method = getnamecallmethod()

        if method == "Kick" or method == "kick" then
            return nil
        end

        return oldNamecall(self, unpack(args))
    end)

    setreadonly(mt, true)
end

protectGame()

local Input = Tab:Input({
    Title = "🔋 Set Max Stamina",
    Desc = "Enter a number to change Max Stamina",
    Value = "",
    PlaceholderText = "Enter stamina...",
    ClearTextOnFocus = true,
    Callback = function(Text)
        task.wait(0.5)
        local stamina = tonumber(Text)
        if stamina then
            local Sprinting = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
            if Sprinting then
                require(Sprinting).MaxStamina = stamina
            end
        end
    end
})

local Input = Tab:Input({
    Title = "⚡ Set Stamina Loss",
    Desc = "Enter a number to change Stamina Loss",
    Value = "",
    PlaceholderText = "Enter value...",
    ClearTextOnFocus = true,
    Callback = function(Text)
        task.wait(0.5)
        local value = tonumber(Text)
        if value then
            local Sprinting = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
            if Sprinting then
                require(Sprinting).StaminaLoss = value
            end
        end
    end
})

local Input = Tab:Input({
    Title = "💪 Set Stamina Gain",
    Desc = "Enter a number to change Stamina Gain",
    Value = "",
    PlaceholderText = "Enter value...",
    ClearTextOnFocus = true,
    Callback = function(Text)
        task.wait(0.5)
        local value = tonumber(Text)
        if value then
            local Sprinting = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
            if Sprinting then
                require(Sprinting).StaminaGain = value
            end
        end
    end
})

local Input = Tab:Input({
    Title = "🏃 Set Sprint Speed",
    Desc = "Enter a number to change Sprint Speed",
    Value = "",
    PlaceholderText = "Enter speed...",
    ClearTextOnFocus = true,
    Callback = function(Text)
        task.wait(0.5)
        local speed = tonumber(Text)
        if speed then
            local Sprinting = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
            if Sprinting then
                require(Sprinting).SprintSpeed = speed
            end
        end
    end
})

local Toggle = Tab:Toggle({
    Title = "🔄 Infinite Stamina",
    Desc = "Disable Stamina Drain",
    Value = false,
    Callback = function(state)
        getgenv().staminaEnabled = state

        local function disableStaminaLoss()
            local replicatedStorage = game:GetService("ReplicatedStorage")
            local systems = replicatedStorage:FindFirstChild("Systems")
            
            if systems then
                local characterSystem = systems:FindFirstChild("Character")
                if characterSystem then
                    local gameConfig = characterSystem:FindFirstChild("Game")
                    if gameConfig then
                        local sprinting = gameConfig:FindFirstChild("Sprinting")
                        if sprinting then
                            local sprintSettings = require(sprinting)
                            
                            if getgenv().staminaEnabled then
                                sprintSettings.StaminaLossDisabled = function() end
                            else
                                sprintSettings.StaminaLossDisabled = nil
                            end
                        end
                    end
                end
            end
        end

        task.spawn(function()
            while getgenv().staminaEnabled do
                disableStaminaLoss()
                task.wait(math.random(0.9, 1.7))
            end
        end)
    end,
})
local Section = Tab:Section({ 
    Title = "🎯 Aimbots",
    TextXAlignment = "Left",
    TextSize = 17,
})

local function notifyError(title, content)
    WindUI:Notify({
        Title = title,
        Content = content,
        Duration = 5,
    })
end

local function createAimbotToggle(title, characterName, globalVar)
    return Tab:Toggle({
        Title = title,
        Desc = title .. " - You must be " .. characterName .. " to use this.",
        Value = false,
        Callback = function(state)
            getgenv()[globalVar] = state

            local player = game.Players.LocalPlayer
            local character = player.Character

            if character and character.Name ~= characterName and state then
                notifyError("⚠️ Error!", "You are not " .. characterName .. "! This may cause bugs.")
                return
            end

            if state then
                getgenv()[globalVar .. "Loop"] = character.HumanoidRootPart.ChildAdded:Connect(function(child)
                    if not getgenv()[globalVar] then return end

                    local killersFolder = workspace.Players:FindFirstChild("Killers")
                    if killersFolder then
                        local killer = killersFolder:FindFirstChildOfClass("Model")
                        if killer and killer:FindFirstChild("HumanoidRootPart") then
                            local killerHRP = killer.HumanoidRootPart
                            local playerHRP = character:FindFirstChild("HumanoidRootPart")

                            if playerHRP then
                                local steps = 1
                                local maxSteps = 100

                                repeat
                                    task.wait(0.01)
                                    steps = steps + 1
                                    workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, killerHRP.Position)
                                    playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, killerHRP.Position)
                                until steps > maxSteps or not getgenv()[globalVar]
                            end
                        end
                    end
                end)
            else
                if getgenv()[globalVar .. "Loop"] then
                    getgenv()[globalVar .. "Loop"]:Disconnect()
                    getgenv()[globalVar .. "Loop"] = nil
                end
            end
        end,
    })
end

createAimbotToggle("Chance Aimbot", "Chance", "chanceAim")
createAimbotToggle("Shedletsky Aimbot", "Shedletsky", "shedAim")
createAimbotToggle("Guest1337 Aimbot", "Guest1337", "guestAim")
local Tab = Window:Tab({
    Title = "💀 Killers",
    Icon = "folder",
})

local function notifyError(title, content)
    WindUI:Notify({
        Title = title,
        Content = content,
        Duration = 5,
    })
end

local Toggle = Tab:Toggle({
    Title = "🎯 1x1x1x1 Aimbot",
    Desc = "Use only if you are 1x1x1x1.",
    Value = false,
    Callback = function(state)
        getgenv().aimbot1x1 = state

        local player = game.Players.LocalPlayer
        local character = player.Character

        if character and character.Name ~= "1x1x1x1" and state then
            notifyError("⚠️ Error!", "You are not 1x1x1x1! This may cause bugs.")
            return
        end

        if state then
            getgenv().aimbot1x1loop = character.HumanoidRootPart.ChildAdded:Connect(function(child)
                if not getgenv().aimbot1x1 then return end

                for _, soundName in pairs(aimbot1x1sounds) do
                    if child.Name == soundName then
                        local survivors = {}
                        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                            if otherPlayer ~= player then
                                local otherCharacter = otherPlayer.Character
                                if otherCharacter and otherCharacter:FindFirstChild("HumanoidRootPart") then
                                    table.insert(survivors, otherCharacter)
                                end
                            end
                        end

                        local nearestSurvivor, shortestDistance = nil, math.huge
                        for _, survivor in pairs(survivors) do
                            local survivorHRP = survivor.HumanoidRootPart
                            local playerHRP = character:FindFirstChild("HumanoidRootPart")

                            if playerHRP then
                                local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                                if distance < shortestDistance then
                                    shortestDistance = distance
                                    nearestSurvivor = survivor
                                end
                            end
                        end

                        if nearestSurvivor then
                            local nearestHRP = nearestSurvivor.HumanoidRootPart
                            local playerHRP = character:FindFirstChild("HumanoidRootPart")

                            if playerHRP then
                                local maxIterations = (child.Name == "rbxassetid://79782181585087") and 220 or 100
                                local steps = 1

                                repeat
                                    task.wait(0.01)
                                    steps = steps + 1
                                    workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, nearestHRP.Position)
                                    playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, nearestHRP.Position)
                                until steps > maxIterations or not getgenv().aimbot1x1
                            end
                        end
                    end
                end
            end)
        else
            if getgenv().aimbot1x1loop then
                getgenv().aimbot1x1loop:Disconnect()
                getgenv().aimbot1x1loop = nil
            end
        end
    end,
})
